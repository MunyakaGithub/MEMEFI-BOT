// ==UserScript==
// @name         Memefi Bot [SmartBot] Enhanced
// @namespace    https://smartbot.black/
// @version      1.8.2
// @description  Bot for playing Memefi on Telegram with UI and advanced features including Turbo Boost, AutoSpin, and game pause/resume
// @author       Smartbot Team
// @match        https://tg-app.memefi.club/*
// @icon         https://www.memefi.club/images/favicons/android-chrome-96x96.png?v=5
// @grant        none
// ==/UserScript==

(() => {
    let isRun = false;
    let isGamePaused = false;
    let settings = {
        minClickDelay: 0,
        maxClickDelay: 1,
        autoSpin: false,
        autoTurbo: false,
        energyThreshold: 10
    };

    const SETTINGS_KEY = 'MemefiBotSettings'; // Storage key for settings

    function saveSettings() {
        localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings));
        console.log('Settings saved:', settings);
    }

    function loadSettings() {
        const savedSettings = localStorage.getItem(SETTINGS_KEY);
        if (savedSettings) {
            settings = JSON.parse(savedSettings);
            console.log('Settings loaded:', settings);
        }
    }

    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function getEnergy() {
        return (
            (document.querySelector('g[clip-path="url(#clip0_21455_16555)"]')
                ?.parentElement?.nextSibling?.querySelector("span")
                ?.innerText?.replace(",", "") ?? 0) * 1
        );
    }

    function clickAtRandomIntervals(minX, maxX, minY, maxY) {
        function clickRandom() {
            if (isGamePaused) return;
            const x = getRandomInt(minX, maxX);
            const y = getRandomInt(minY, maxY);
            const element = document.elementFromPoint(x, y);
            if (element) {
                const pointerDownEvent = new PointerEvent("pointerdown", {
                    pointerId: 1,
                    bubbles: true,
                    cancelable: true,
                    view: window,
                    clientX: x,
                    clientY: y,
                    pointerType: "touch"
                });
                element.dispatchEvent(pointerDownEvent);
            }
            const delay = getRandomInt(settings.minClickDelay, settings.maxClickDelay);
            setTimeout(clickRandom, delay);
        }

        // Use requestAnimationFrame to try to avoid throttling in background tabs
        function runClickLoop() {
            if (!document.hidden && isRun) {
                clickRandom();
            }
            requestAnimationFrame(runClickLoop);
        }

        runClickLoop();
    }

    function toggleUIVisibility(hide) {
        const uiElement = document.getElementById("memefi-bot-ui");
        const minimizeButton = document.getElementById("minimizedButton");

        if (hide) {
            // Hide the main UI
            uiElement.style.display = "none";

            // Make the minimized button visible and move it to a specific location (e.g., bottom-right)
            minimizeButton.style.display = "block";
            minimizeButton.style.position = "fixed";
            minimizeButton.style.bottom = "10px";  // Place at the bottom
            minimizeButton.style.right = "10px";   // Place on the right
        } else {
            // Show the main UI and hide the minimized button
            uiElement.style.display = "block";
            minimizeButton.style.display = "none";
        }
    }

    function startBot() {
        if (getEnergy() < settings.energyThreshold) {
            alert("Not enough energy to start the bot!");
            return;
        }

        isRun = true;
        toggleUIVisibility(true);
        const bodyRect = document.body.getBoundingClientRect();
        clickAtRandomIntervals(0, bodyRect.width, 0, bodyRect.height);
        if (settings.autoSpin) {
            clickButton();
        }
    }

    function toggleAutoTurbo() {
        settings.autoTurbo = !settings.autoTurbo;
        document.getElementById('autoTurboButton').textContent = settings.autoTurbo ? 'Auto Use Turbo: On' : 'Auto Use Turbo: Off';
        saveSettings();
        if (settings.autoTurbo) {
            startAutoTurbo();
        }
    }

    function toggleAutoSpin() {
        settings.autoSpin = !settings.autoSpin;
        document.getElementById('autoSpinButton').textContent = settings.autoSpin ? 'AutoSpin: On' : 'AutoSpin: Off';
        saveSettings();

        if (settings.autoSpin) {
            clickButton(); // Start auto spinning
            setTimeout(() => {
                // After a delay, return to normal tapping
                clickAtRandomIntervals(0, document.body.clientWidth, 0, document.body.clientHeight);
            }, 5000); // Adjust this delay as needed
        }
    }

    function toggleGamePause() {
        isGamePaused = !isGamePaused;
        document.getElementById('pauseResumeButton').textContent = isGamePaused ? 'Resume' : 'Pause';
        saveSettings();
    }

    function clickButton() {
        if (!settings.autoSpin) return;

        const button = document.querySelector('.css-58bkmv');
        if (button) {
            ['touchstart', 'touchend'].forEach(eventType =>
                button.dispatchEvent(new TouchEvent(eventType, { bubbles: true, cancelable: true, touches: [new Touch({ identifier: 1, target: button })] }))
            );
            button.click();
        }
        setTimeout(clickButton, Math.random() * 2500 + 2500);
    }

    function startAutoTurbo() {
        if (!settings.autoTurbo) return;

        const openBoosterButton = document.querySelector('button.css-wfy1cz');
        if (openBoosterButton) {
            openBoosterButton.click(); // Open the booster interface

            setTimeout(() => {
                const boosterCountElement = document.querySelector('.MuiTypography-bodyLittleBold.css-1yf75a9');
                if (boosterCountElement) {
                    const boosterCount = parseInt(boosterCountElement.textContent.split('/')[0].trim());
                    if (boosterCount > 0) {
                        const activateButton = document.querySelector('.MuiButton-primarySizeLarge.css-q3yh8u');
                        if (activateButton) {
                            activateButton.click(); // Activate the booster
                            console.log('Turbo activated.');
                            // Return to normal tapping after a delay
                            setTimeout(() => {
                                clickAtRandomIntervals(0, document.body.clientWidth, 0, document.body.clientHeight);
                            }, 5000); // Adjust this delay as needed
                        }
                    } else {
                        console.log('No available boosters. Auto Turbo disabled.');
                        settings.autoTurbo = false;
                        saveSettings();
                    }
                }
            }, 1500);
        }
    }

    function createSettingElement(label, id, type, min, max, step, tooltip) {
        const container = document.createElement('div');
        container.className = 'setting-element';

        const labelElem = document.createElement('label');
        labelElem.textContent = label;
        container.appendChild(labelElem);

        const inputElem = document.createElement('input');
        inputElem.id = id;
        inputElem.type = type;
        inputElem.min = min;
        inputElem.max = max;
        inputElem.step = step;
        inputElem.value = settings[id];
        inputElem.addEventListener('change', (e) => {
            settings[id] = e.target.value;
            document.getElementById(`${id}Display`).textContent = e.target.value;
            saveSettings();
        });
        container.appendChild(inputElem);

        const displayElem = document.createElement('span');
        displayElem.id = `${id}Display`;
        displayElem.textContent = inputElem.value;
        container.appendChild(displayElem);

        const tooltipElem = document.createElement('div');
        tooltipElem.className = 'tooltip';
        tooltipElem.innerHTML = tooltip;
        container.appendChild(tooltipElem);

        return container;
    }

    function createUI() {
        const ui = document.createElement("div");
        ui.id = "memefi-bot-ui";
        ui.style.position = "fixed";
        ui.style.top = "5px";
        ui.style.left = "5px";
        ui.style.width = "300px";
        ui.style.backgroundColor = "#2d2d2d";
        ui.style.color = "#ffffff";
        ui.style.border = "2px solid #ff5722";
        ui.style.padding = "10px";
        ui.style.zIndex = "99999";
        ui.style.cursor = "move"; // Add move cursor style

        // Make the UI draggable
        let isDragging = false;
        let offsetX, offsetY;
        ui.addEventListener('mousedown', function (e) {
            isDragging = true;
            offsetX = e.clientX - ui.getBoundingClientRect().left;
            offsetY = e.clientY - ui.getBoundingClientRect().top;
            document.body.style.userSelect = 'none'; // Prevent text selection while dragging
        });

        document.addEventListener('mousemove', function (e) {
            if (isDragging) {
                ui.style.left = `${e.clientX - offsetX}px`;
                ui.style.top = `${e.clientY - offsetY}px`;
            }
        });

        document.addEventListener('mouseup', function () {
            isDragging = false;
            document.body.style.userSelect = ''; // Restore text selection
        });

        // Buttons for auto spin and turbo
        const autoSpinButton = document.createElement("button");
        autoSpinButton.id = "autoSpinButton";
        autoSpinButton.textContent = settings.autoSpin ? 'AutoSpin: On' : 'AutoSpin: Off';
        autoSpinButton.onclick = toggleAutoSpin;
        ui.appendChild(autoSpinButton);

        const autoTurboButton = document.createElement("button");
        autoTurboButton.id = "autoTurboButton";
        autoTurboButton.textContent = settings.autoTurbo ? 'Auto Use Turbo: On' : 'Auto Use Turbo: Off';
        autoTurboButton.onclick = toggleAutoTurbo;
        ui.appendChild(autoTurboButton);

        const pauseResumeButton = document.createElement('button');
        pauseResumeButton.id = 'pauseResumeButton';
        pauseResumeButton.textContent = isGamePaused ? 'Resume' : 'Pause';
        pauseResumeButton.onclick = toggleGamePause;
        ui.appendChild(pauseResumeButton);

        const startBotButton = document.createElement("button");
        startBotButton.textContent = "Start Bot";
        startBotButton.onclick = startBot;
        ui.appendChild(startBotButton);

        // Settings
        ui.appendChild(createSettingElement("Min Click Delay (ms):", "minClickDelay", "range", 0, 5000, 50, "Minimum delay between clicks"));
        ui.appendChild(createSettingElement("Max Click Delay (ms):", "maxClickDelay", "range", 0, 5000, 50, "Maximum delay between clicks"));
        ui.appendChild(createSettingElement("Energy Threshold:", "energyThreshold", "number", 1, 100, 1, "Minimum energy to start the bot"));

        // Add the hide button
        const hideButton = document.createElement("button");
        hideButton.textContent = "Hide UI";
        hideButton.onclick = () => toggleUIVisibility(true);
        ui.appendChild(hideButton);

        document.body.appendChild(ui);

        // Minimized button
        const minimizedButton = document.createElement("button");
        minimizedButton.id = "minimizedButton";
        minimizedButton.textContent = "Show UI";
        minimizedButton.style.display = "none"; // Initially hidden
        minimizedButton.onclick = () => toggleUIVisibility(false);
        document.body.appendChild(minimizedButton);
    }

    // Load settings and create UI on page load
    window.onload = () => {
        loadSettings();
        createUI();
    };
})();
